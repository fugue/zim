// Code generated by MockGen. DO NOT EDIT.
// Source: exec/exec.go

// Package exec is a generated GoMock package.
package exec

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExecutor is a mock of Executor interface
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockExecutor) Execute(ctx context.Context, opts ExecOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockExecutorMockRecorder) Execute(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockExecutor)(nil).Execute), ctx, opts)
}

// UsesDocker mocks base method
func (m *MockExecutor) UsesDocker() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsesDocker")
	ret0, _ := ret[0].(bool)
	return ret0
}

// UsesDocker indicates an expected call of UsesDocker
func (mr *MockExecutorMockRecorder) UsesDocker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsesDocker", reflect.TypeOf((*MockExecutor)(nil).UsesDocker))
}

// ExecutorPath mocks base method
func (m *MockExecutor) ExecutorPath(hostPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutorPath", hostPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecutorPath indicates an expected call of ExecutorPath
func (mr *MockExecutorMockRecorder) ExecutorPath(hostPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutorPath", reflect.TypeOf((*MockExecutor)(nil).ExecutorPath), hostPath)
}
